version: '3.8'

services:
  # Devcontainer service
  devcontainer:
    image: node:20-bullseye
    volumes:
      - .:/workspaces/campfyre
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspaces/campfyre
    command: sleep infinity
    networks:
      - campfyre-network
    profiles: ['devcontainer']

  # API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://campfyre:campfyre@db:5432/campfyre
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    volumes:
      - ./api:/app
      - /app/node_modules
    networks:
      - campfyre-network
    profiles: ['dev', 'all']
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web service
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - API_URL=http://api:3000
    volumes:
      - ./web:/app
      - /app/node_modules
    networks:
      - campfyre-network
    profiles: ['dev', 'all']
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health.txt']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=campfyre
      - POSTGRES_USER=campfyre
      - POSTGRES_PASSWORD=campfyre
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - campfyre-network
    profiles: ['infra', 'all']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U campfyre -d campfyre']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    networks:
      - campfyre-network
    profiles: ['infra', 'all']
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # TURN server for WebRTC
  coturn:
    image: coturn/coturn:latest
    ports:
      - '3478:3478'
      - '3478:3478/udp'
      - '49152-65535:49152-65535/udp'
    environment:
      - TURN_USERNAME=campfyre
      - TURN_PASSWORD=campfyre123
    command: >
      --listening-port=3478
      --tls-listening-port=5349
      --listening-ip=0.0.0.0
      --external-ip=172.17.0.1
      --realm=campfyre.local
      --server-name=campfyre.local
      --user=campfyre:campfyre123
      --no-tlsv1
      --no-tlsv1_1
      --no-dtls
      --no-tls
      --log-file=stdout
      --verbose
      --fingerprint
      --lt-cred-mech
    networks:
      - campfyre-network
    profiles: ['infra', 'all']
    healthcheck:
      test: ['CMD-SHELL', 'netstat -an | grep 3478']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=campfyre
      - MINIO_ROOT_PASSWORD=campfyre123
    volumes:
      - minio_data:/data
    networks:
      - campfyre-network
    profiles: ['infra', 'all']
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: server /data --console-address ":9001"

  # Reverse proxy
  reverse-proxy:
    image: caddy:2-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
      - web
    networks:
      - campfyre-network
    profiles: ['all']

volumes:
  postgres_data:
  redis_data:
  minio_data:
  caddy_data:
  caddy_config:

networks:
  campfyre-network:
    driver: bridge
