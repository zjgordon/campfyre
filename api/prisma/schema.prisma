// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for authentication and user management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  games     Game[]
  sessions  Session[]

  @@map("users")
}

// Game model for game management
model Game {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      GameStatus @default(ACTIVE)
  maxPlayers  Int      @default(4)
  currentPlayers Int   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  @@map("games")
}

// Session model for user sessions
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("sessions")
}

// Enums
enum GameStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}
